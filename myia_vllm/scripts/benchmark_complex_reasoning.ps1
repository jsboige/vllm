# ============================================
# BENCHMARK REASONING COMPLEXE
# Phase 2.3 - Mission 11 Phase 8
# ============================================

<#
.SYNOPSIS
    Benchmark de capacit√©s de raisonnement complexe du mod√®le Qwen3-32B

.DESCRIPTION
    Ce script teste les capacit√©s de raisonnement du mod√®le sur 3 t√¢ches sp√©cialis√©es:
    1. Planification multi-√©tapes (10 √©tapes pour todo app)
    2. Raisonnement logique (probl√®me math√©matique)
    3. Analyse code Python (5 optimisations)
    
    M√©triques collect√©es:
    - TTFT (Time To First Token)
    - Dur√©e g√©n√©ration totale
    - Tokens g√©n√©r√©s
    - Tokens/seconde
    - √âvaluation qualit√© (subjective)

.PARAMETER ApiUrl
    URL de l'API vLLM (d√©faut: http://localhost:5002/v1/chat/completions)

.PARAMETER OutputFile
    Chemin du fichier de sortie JSON

.EXAMPLE
    .\benchmark_complex_reasoning.ps1
    
.EXAMPLE
    .\benchmark_complex_reasoning.ps1 -OutputFile "custom_output.json"
#>

param(
    [string]$ApiUrl = "http://localhost:5002/v1/chat/completions",
    [string]$OutputFile = "myia_vllm/test_results/complex_reasoning_benchmark_$(Get-Date -Format 'yyyyMMdd_HHmmss').json"
)

$ErrorActionPreference = "Stop"

# ============================================
# CONFIGURATION
# ============================================

# Charger API Key depuis .env
$envFile = "myia_vllm/.env"
if (Test-Path $envFile) {
    Get-Content $envFile | ForEach-Object {
        if ($_ -match '^VLLM_API_KEY_MEDIUM=(.+)$') {
            $ApiKey = $matches[1]
        }
    }
}

if (-not $ApiKey) {
    Write-Host "‚ùå ERREUR: VLLM_API_KEY_MEDIUM non trouv√©e dans .env" -ForegroundColor Red
    exit 1
}

$Model = "Qwen/Qwen3-32B-AWQ"

Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "BENCHMARK REASONING COMPLEXE" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan
Write-Host "üéØ Objectif : Tester capacit√©s raisonnement Qwen3-32B" -ForegroundColor Yellow
Write-Host "üìä T√¢ches : 3 (Planification, Logique, Analyse Code)" -ForegroundColor Yellow
Write-Host "üåê API URL : $ApiUrl`n" -ForegroundColor Yellow

# ============================================
# FONCTION : MESURER REQU√äTE DE REASONING
# ============================================
function Measure-ReasoningTask {
    param(
        [string]$Prompt,
        [int]$TaskId,
        [string]$TaskName,
        [int]$MaxTokens = 1000
    )
    
    $messages = @(
        @{
            role = "user"
            content = $Prompt
        }
    )
    
    $body = @{
        model = $Model
        messages = $messages
        max_tokens = $MaxTokens
        temperature = 0.3  # Temp√©rature basse pour coh√©rence
        stream = $false
    } | ConvertTo-Json -Depth 10
    
    Write-Host "üîÑ Ex√©cution T√¢che ${TaskId}: $TaskName..." -ForegroundColor Yellow
    
    try {
        $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
        
        $response = Invoke-WebRequest `
            -Uri $ApiUrl `
            -Method POST `
            -Body $body `
            -ContentType "application/json" `
            -Headers @{
                "Authorization" = "Bearer $ApiKey"
            } `
            -TimeoutSec 120  # 2 min timeout pour reasoning complexe
        
        $elapsed = $stopwatch.Elapsed.TotalMilliseconds
        $stopwatch.Stop()
        
        $responseData = $response.Content | ConvertFrom-Json
        $responseContent = $responseData.choices[0].message.content
        $tokensGenerated = if ($responseData.usage) { $responseData.usage.completion_tokens } else { 0 }
        $tokensPerSec = if ($elapsed -gt 0) { [math]::Round(($tokensGenerated / $elapsed) * 1000, 2) } else { 0 }
        
        Write-Host "  ‚úÖ Compl√©t√© en $([math]::Round($elapsed, 0))ms" -ForegroundColor Green
        Write-Host "  üìù Tokens g√©n√©r√©s: $tokensGenerated (${tokensPerSec} tok/sec)" -ForegroundColor Gray
        
        return @{
            Success = $true
            TaskId = $TaskId
            TaskName = $TaskName
            TTFT_ms = [math]::Round($elapsed, 2)
            TotalDuration_ms = [math]::Round($elapsed, 2)
            TokensGenerated = $tokensGenerated
            TokensPerSec = $tokensPerSec
            Response = $responseContent
            Prompt = $Prompt
        }
        
    } catch {
        Write-Host "  ‚ùå ERREUR: $($_.Exception.Message)" -ForegroundColor Red
        return @{
            Success = $false
            TaskId = $TaskId
            TaskName = $TaskName
            Error = $_.Exception.Message
            Prompt = $Prompt
        }
    }
}

# ============================================
# FONCTION : √âVALUER QUALIT√â R√âPONSE
# ============================================
function Evaluate-ResponseQuality {
    param(
        [string]$Response,
        [int]$TaskId,
        [hashtable]$Criteria
    )
    
    Write-Host "`nüìã √âvaluation qualit√© T√¢che ${TaskId}:" -ForegroundColor Cyan
    
    $scores = @()
    $notes = @()
    
    foreach ($criterion in $Criteria.Keys) {
        $pattern = $Criteria[$criterion]
        $match = $Response -match $pattern
        
        if ($match) {
            Write-Host "  ‚úÖ $criterion : Pr√©sent" -ForegroundColor Green
            $scores += 1
        } else {
            Write-Host "  ‚ö†Ô∏è  $criterion : Absent" -ForegroundColor Yellow
            $scores += 0
        }
    }
    
    $scoreTotal = ($scores | Measure-Object -Sum).Sum
    $scoreMax = $Criteria.Count
    $scorePct = [math]::Round(($scoreTotal / $scoreMax) * 100, 0)
    
    # D√©terminer qualit√© globale
    $quality = if ($scorePct -ge 80) {
        "excellent"
    } elseif ($scorePct -ge 60) {
        "bon"
    } elseif ($scorePct -ge 40) {
        "acceptable"
    } else {
        "insuffisant"
    }
    
    Write-Host "  üìä Score: ${scoreTotal}/${scoreMax} (${scorePct}%) - Qualit√©: $quality" -ForegroundColor $(
        if ($quality -eq "excellent") { "Green" }
        elseif ($quality -eq "bon") { "Yellow" }
        else { "Red" }
    )
    
    return @{
        Score = $scoreTotal
        ScoreMax = $scoreMax
        ScorePct = $scorePct
        Quality = $quality
        Details = $notes
    }
}

# ============================================
# D√âFINITION DES T√ÇCHES
# ============================================

# T√ÇCHE 1: Planification Multi-√âtapes
$task1Prompt = @"
Cr√©er un plan d√©taill√© en 10 √©tapes pour d√©velopper une application web compl√®te de gestion de t√¢ches (todo app) avec authentification, base de donn√©es PostgreSQL, et d√©ploiement sur AWS. 

Pour chaque √©tape, tu dois inclure:
1. L'objectif de l'√©tape
2. Les technologies recommand√©es
3. La dur√©e estim√©e en heures

Pr√©sente le plan de mani√®re structur√©e et num√©rot√©e.
"@

$task1Criteria = @{
    "10 √©tapes identifiables" = "(?:(?:√©tape|step)\s*(?:\d+|[a-z]+).*?){10,}"
    "Technologies mentionn√©es" = "(?:react|vue|angular|node|express|postgresql|aws|docker|nginx)"
    "Dur√©es estim√©es" = "(?:heure|hour|jour|day|semaine|week)"
    "Structure coh√©rente" = "(?:authentification|auth|database|d√©ploiement|deploy|test)"
}

# T√ÇCHE 2: Raisonnement Logique
$task2Prompt = @"
R√©soudre ce probl√®me logique √©tape par √©tape:

Si A > B et B > C, et C = 5, et A = 2*C, quelle est la valeur de B?

D√©taille ton raisonnement en expliquant:
1. Les donn√©es connues
2. Les relations entre les variables
3. Le calcul pour trouver B
4. La v√©rification de la solution
"@

$task2Criteria = @{
    "Identification des donn√©es" = "(?:C\s*=\s*5|A\s*=\s*2.*C|A\s*=\s*10)"
    "Calcul de A" = "(?:A\s*=\s*10|2\s*\*\s*5\s*=\s*10)"
    "D√©duction intervalle B" = "(?:5\s*<\s*B\s*<\s*10|B.*entre.*5.*10)"
    "Solution correcte" = "(?:B\s*=\s*[6-9]|B.*(?:6|7|8|9))"
}

# T√ÇCHE 3: Analyse Code Python
$task3Prompt = @"
Analyser ce code Python et identifier 5 optimisations possibles avec justifications:

```python
def process_data(items):
    result = []
    for item in items:
        if item['active'] == True:
            temp = {}
            temp['id'] = item['id']
            temp['name'] = item['name'].upper()
            temp['score'] = item['score'] * 2
            result.append(temp)
    return result
```

Pour chaque optimisation, fournis:
1. Le probl√®me identifi√©
2. La solution propos√©e
3. Le code am√©lior√©
4. Le gain attendu (performance/lisibilit√©)
"@

$task3Criteria = @{
    "List comprehension" = "(?:list\s+comprehension|compr√©hension.*liste)"
    "Dict literal" = "(?:dict.*literal|\{)"
    "Comparaison bool√©enne" = "(?:if\s+item.*:|== True.*inutile|is True)"
    "Filter ou map" = "(?:filter\s*\(|map\s*\()"
    "Code am√©lior√© fourni" = "(?:```python|def\s+process_data)"
}

# ============================================
# EX√âCUTION DES BENCHMARKS
# ============================================

$allResults = @{
    test_date = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")
    config = "chunked_only_safe"
    model = $Model
    tasks = @()
}

$tasks = @(
    @{
        Id = 1
        Name = "Planification Multi-√âtapes"
        Prompt = $task1Prompt
        MaxTokens = 1200
        Criteria = $task1Criteria
    },
    @{
        Id = 2
        Name = "Raisonnement Logique"
        Prompt = $task2Prompt
        MaxTokens = 800
        Criteria = $task2Criteria
    },
    @{
        Id = 3
        Name = "Analyse Code Python"
        Prompt = $task3Prompt
        MaxTokens = 1500
        Criteria = $task3Criteria
    }
)

foreach ($task in $tasks) {
    Write-Host "`n========================================" -ForegroundColor Cyan
    Write-Host "T√ÇCHE $($task.Id): $($task.Name)" -ForegroundColor Cyan
    Write-Host "========================================" -ForegroundColor Cyan
    
    # Ex√©cuter la t√¢che
    $result = Measure-ReasoningTask `
        -Prompt $task.Prompt `
        -TaskId $task.Id `
        -TaskName $task.Name `
        -MaxTokens $task.MaxTokens
    
    if ($result.Success) {
        # √âvaluer qualit√©
        $evaluation = Evaluate-ResponseQuality `
            -Response $result.Response `
            -TaskId $task.Id `
            -Criteria $task.Criteria
        
        # Ajouter √©valuation au r√©sultat
        $result.QualityAssessment = $evaluation.Quality
        $result.QualityScore = $evaluation.Score
        $result.QualityScoreMax = $evaluation.ScoreMax
        $result.QualityScorePct = $evaluation.ScorePct
        
        # Ajouter notes suppl√©mentaires bas√©es sur la t√¢che
        $notes = switch ($task.Id) {
            1 { 
                if ($result.TokensGenerated -ge 800) {
                    "Plan d√©taill√© et complet"
                } else {
                    "Plan pourrait √™tre plus d√©taill√©"
                }
            }
            2 {
                if ($result.Response -match "(?:B\s*=\s*[6-9]|entre.*5.*10)") {
                    "Solution correcte identifi√©e"
                } else {
                    "Solution incompl√®te ou incorrecte"
                }
            }
            3 {
                $optCount = ([regex]::Matches($result.Response, "(?:optimisation|am√©lioration)", "IgnoreCase")).Count
                if ($optCount -ge 5) {
                    "$optCount optimisations propos√©es"
                } else {
                    "Seulement $optCount optimisations identifi√©es"
                }
            }
        }
        
        $result.Notes = $notes
    }
    
    # Ajouter aux r√©sultats globaux
    $allResults.tasks += $result
    
    # Pause entre t√¢ches
    if ($task.Id -lt $tasks.Count) {
        Write-Host "`nPause 2 secondes avant t√¢che suivante..." -ForegroundColor Gray
        Start-Sleep -Seconds 2
    }
}

# ============================================
# CALCUL STATISTIQUES GLOBALES
# ============================================
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host "ANALYSE GLOBALE" -ForegroundColor Cyan
Write-Host "========================================`n" -ForegroundColor Cyan

$successTasks = $allResults.tasks | Where-Object { $_.Success }

if ($successTasks.Count -gt 0) {
    $ttftAvg = [math]::Round(($successTasks | Measure-Object -Property TTFT_ms -Average).Average, 2)
    $tokensPerSecAvg = [math]::Round(($successTasks | Measure-Object -Property TokensPerSec -Average).Average, 2)
    
    # Calcul qualit√© globale
    $qualityCounts = @{}
    foreach ($task in $successTasks) {
        $quality = $task.QualityAssessment
        if ($qualityCounts.ContainsKey($quality)) {
            $qualityCounts[$quality]++
        } else {
            $qualityCounts[$quality] = 1
        }
    }
    
    # D√©terminer qualit√© dominante
    $qualityOverall = ($qualityCounts.GetEnumerator() | Sort-Object -Property Value -Descending | Select-Object -First 1).Name
    
    $allResults.summary = @{
        ttft_avg = $ttftAvg
        tokens_per_sec_avg = $tokensPerSecAvg
        quality_overall = $qualityOverall
        successful_tasks = $successTasks.Count
        failed_tasks = $tasks.Count - $successTasks.Count
    }
    
    Write-Host "üìà M√©triques Globales :" -ForegroundColor Cyan
    Write-Host "   TTFT moyen             : ${ttftAvg}ms" -ForegroundColor White
    Write-Host "   Tokens/sec moyen       : ${tokensPerSecAvg}" -ForegroundColor White
    Write-Host "   Qualit√© globale        : $qualityOverall" -ForegroundColor $(
        if ($qualityOverall -eq "excellent") { "Green" }
        elseif ($qualityOverall -eq "bon") { "Yellow" }
        else { "Red" }
    )
    Write-Host "   T√¢ches r√©ussies        : $($successTasks.Count)/$($tasks.Count)" -ForegroundColor White
    
    # R√©sum√© par t√¢che
    Write-Host "`nüìä R√©sum√© par T√¢che :" -ForegroundColor Cyan
    foreach ($task in $successTasks) {
        $color = if ($task.QualityAssessment -eq "excellent") { "Green" } 
                 elseif ($task.QualityAssessment -eq "bon") { "Yellow" } 
                 else { "Red" }
        Write-Host "   T√¢che $($task.TaskId) ($($task.TaskName)):" -ForegroundColor Gray
        Write-Host "      TTFT: $($task.TTFT_ms)ms | Tokens: $($task.TokensGenerated) | Qualit√©: $($task.QualityAssessment)" -ForegroundColor $color
    }
}

# ============================================
# SAUVEGARDE R√âSULTATS
# ============================================
$outputDir = Split-Path $OutputFile -Parent
if (-not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
}

$allResults | ConvertTo-Json -Depth 10 | Out-File -FilePath $OutputFile -Encoding UTF8

Write-Host "`n‚úÖ R√©sultats sauvegard√©s : $OutputFile" -ForegroundColor Green
Write-Host "`nüéâ BENCHMARK COMPL√âT√â`n" -ForegroundColor Cyan