FROM vllm/vllm-openai:qwen3-final

# Copier le fichier qwen3_tool_parser.py
COPY qwen3/parsers/qwen3_tool_parser.py /workspace/vllm/entrypoints/openai/tool_parsers/

# Mettre à jour le fichier __init__.py pour inclure l'importation du parser Qwen3
RUN if [ -f /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py ]; then \
        echo 'from .qwen3_tool_parser import Qwen3ToolParser' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        sed -i 's/__all__ = \[/__all__ = \["Qwen3ToolParser", /g' /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py; \
    else \
        echo '# SPDX-License-Identifier: Apache-2.0' > /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        echo 'from .abstract_tool_parser import ToolParser, ToolParserManager' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        echo 'from .qwen3_tool_parser import Qwen3ToolParser' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py && \
        echo '__all__ = ["ToolParser", "ToolParserManager", "Qwen3ToolParser"]' >> /workspace/vllm/entrypoints/openai/tool_parsers/__init__.py; \
    fi

# Créer le fichier abstract_tool_parser.py s'il n'existe pas
RUN if [ ! -f /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py ]; then \
        echo '# SPDX-License-Identifier: Apache-2.0' > /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo 'from typing import Dict, Type' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo 'class ToolParser:' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '    def __init__(self, tokenizer):' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '        self.model_tokenizer = tokenizer' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '        self.vocab = {}' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '        if tokenizer:' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '            self.vocab = {v: k for k, v in tokenizer.get_vocab().items()}' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo 'class ToolParserManager:' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '    tool_parsers: Dict[str, Type[ToolParser]] = {}' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '    @classmethod' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '    def register_module(cls, name):' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '        def register(tool_parser_cls):' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '            cls.tool_parsers[name] = tool_parser_cls' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '            return tool_parser_cls' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py && \
        echo '        return register' >> /workspace/vllm/entrypoints/openai/tool_parsers/abstract_tool_parser.py; \
    fi

# Corriger le script improved_cli_args_patch.py
RUN if [ -f /workspace/improved_cli_args_patch.py ]; then \
        sed -i 's/import vllm.entrypoints.openai.tool_parsers.qwen3_tool_parser/# import vllm.entrypoints.openai.tool_parsers.qwen3_tool_parser/g' /workspace/improved_cli_args_patch.py; \
    fi

# Définir la commande par défaut
CMD ["vllm-openai", "--model", "Qwen/Qwen3-7B-Instruct", "--tool-call-parser", "qwen3"]